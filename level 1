#include <iostream>

using namespace std;

void divide(int num, int den) {
    try {
        if (den == 0) {
            throw "Division by zero error";
        }
        if (num % den != 0) {
            throw runtime_error("Non-integral result error");
        }
        cout << "Result of division: " << num / den << endl;
    } catch (const char* error) {
        cout << "Caught exception: " << error << endl;
    } catch (const runtime_error& error) {
        cout << "Caught exception: " << error.what() << endl;
    }
}

int main() {
    int numerator, denominator;
    
    cout << "Enter numerator: ";
    cin >> numerator;
    cout << "Enter denominator: ";
    cin >> denominator;
    
    try {
        divide(numerator, denominator);
    } catch (...) {
        cout << "Unknown exception caught" << endl;
    }
    
    return 0;
} 

#include <iostream>
using namespace std;

double division(int a, int b) {
    if (b == 0) {
        throw "Division by zero error";
    }
    return static_cast<double>(a) / b;
}

int main() {
    int numerator, denominator;
    
    cout << "Enter numerator: ";
    cin >> numerator;
    cout << "Enter denominator: ";
    cin >> denominator;
    
    try {
        double result = division(numerator, denominator);
        cout << "Result of division: " << result << endl;
    } catch (const char* error) {
        cout << "Caught exception: " << error << endl;
    }
    
    return 0;
}


#include <iostream>
#include <memory>
using namespace std;

class Resource {
public:
    Resource() {
        cout << "Resource acquired." << endl;
    }

    ~Resource() {
        cout << "Resource released." << endl;
    }
};

int main() {
    try {
        // Acquiring resource
        shared_ptr<Resource> ptr(new Resource());

        // Perform some operations
        cout << "Performing some operations..." << endl;

        // Simulating an exception
        throw runtime_error("Simulated exception");
    } catch (const runtime_error& error) {
        cout << "Caught exception: " << error.what() << endl;
    }

    // Even if an exception occurs, the destructor of 'Resource' will be called
    return 0;
}


#include <iostream>
#include <string>
using namespace std;

class Programming {
public:
    // Constructor with default argument
    Programming(const string& language = "programming languages") {
        cout << "I love " << language << endl;
    }
};

int main() {
    // Creating objects of Programming class with different arguments
    Programming obj1;       // Output: "I love programming languages"
    Programming obj2("cpp"); // Output: "I love cpp"
    Programming obj3("Java"); // Output: "I love Java"

    return 0;
}


